{"name":"Git-tips","tagline":"Git Tips for a Better Work Flow","body":"# Git Tips for a Better Work Flow\r\n\r\n> I decided to create this file with basic git tips, to help developers who are starting to use this great version control tool in its development tasks.\r\n\r\n> Author: Ricardo Emerson de Freitas Jardim\r\n\r\n### Setting your identification\r\n\r\n\r\n```sh\r\ngit config --global user.name \"Your Name\"\r\ngit config --global user.email \"your_email@domain-name.com\"\r\n```\r\n\r\n### Setting a local repository\r\n\r\nInitiate a empty repository:\r\n\r\n```sh\r\ngit init\r\n```\r\n\r\nAdd files to project:\r\n\r\n```sh\r\ngit add .\r\n```\r\n\r\nCommit files to local repository:\r\n\r\n```sh\r\ngit commit -am \"Message Description\"\r\n```\r\n\r\n### Check informations about local repository.\r\n\r\n##### Statuses:\r\n\r\nChecking the status of changes:\r\n\r\n```sh\r\ngit status\r\n```\r\n\r\nChecking the status of changes at resuming mode:\r\n\r\n```sh\r\ngit status -s\r\n```\r\n\r\n##### Branches\r\n\r\nListing the local branchs:\r\n\r\n```sh\r\ngit branch\r\n```\r\n\r\nListing the local and remote branchs:\r\n\r\n```sh\r\ngit branch --all\r\n```\r\n\r\n\r\n##### Logs\r\nShows the commit log:\r\n\r\n```sh\r\ngit log\r\n```\r\n\r\nShows the commit log whith their changes:\r\n\r\n```sh\r\ngit log -p\r\n```\r\n\r\nShows the commit log in summarized mode:\r\n\r\n```sh\r\ngit log --pretty=oneline'\r\n```\r\n\r\n##### Remote Repositories\r\nListing remotes repositories:\r\n\r\n```sh\r\ngit remote\r\n```\r\n\r\nListing remotes repositories with remote url after name:\r\n\r\n```sh\r\ngit remote -v\r\n```\r\n\r\nShow the status of local and remote repository. After this, you could perform a push to update server with local data repository or pull for update local with remote data repository: \r\n\r\n```sh\r\ngit remote show <remote_repository>\r\n\r\n# Local is fast forward? So:\r\ngit push origin master\r\n\r\n# Remote is fast forward? So:\r\ngit pull origin master\r\n```\r\n\r\n\r\n### Branchs operations.\r\nCreating a branch:\r\n\r\n```sh\r\ngit checkout -b <branch_name>\r\n```\r\n\r\nListing the local branchs:\r\n\r\n```sh\r\ngit branch\r\n```\r\n\r\nListing the local and remote branchs:\r\n\r\n```sh\r\ngit branch --all\r\n```\r\n\r\nSwitching between branchs:\r\n\r\n```sh\r\ngit checkout <branch_name>\r\n```\r\n\r\nMergin data between branchs:\r\n\r\n```sh\r\n# First go to the target_branch to get data from source_branch.\r\ngit checkout <target_branch>\r\n\r\n# Now run merge for update target_branch with source_branch data.\r\ngit merge <source_branch>\r\n```\r\n\r\n### Settings for remote repositories\r\n\r\n##### Setting a remote repository.\r\n    \r\nOn **GitHub**, creates a repository and assuming that we have already created a local repository, follow the steps below:\r\n\r\n```sh\r\ncd <project_path>\r\ngit remote add origin https://github.com/<user_name>/<repository_name>.git\r\n# On the first push, you must use --all to send all branchs to remote repository.\r\ngit push -u origin --all\r\n# Later, just need use push like below:\r\ngit push origin <branch_name>\r\n```\r\n\r\nOn **Bitbucket**, creates a repository and assuming that we have already created a local repository, follow the steps below:\r\n\r\n```sh\r\ncd <project_path>\r\ngit remote add origin git@bitbucket.org:<user_name>/repository_name.git\r\n# On the first push, you must use --all to send all branchs to remote repository.\r\ngit push -u origin --all\r\n# Later, just need use push like below:\r\ngit push origin <branch_name>\r\n```\r\n\r\n\r\n##### Setting a SSH server as a remote repository.\r\n\r\nCreate the SSH repository:\r\n\r\n```sh\r\n# First access remote SSH server via ssh.\r\nssh <user_name>@server_ssh_name\r\n\r\n# Create and access the local of repository.\r\nmkdir -p ~/directory_name/<repository_name>.git\r\ncd ~/<directory_name>/<repository_name>.git\r\n\r\n# Initiate the repository.\r\ngit init --bare\r\n\r\n# Exit server to back to developer machine.\r\n<ctrl> + <d>\r\n\r\n# Add remote SSH repository to local project.\r\ngit remote add ssh ssh://<user_name>@server_ssh_name/~/<directory_name>/<repository_name>.git\r\n\r\n# On the first push, you must use --all to send all branchs to remote repository.\r\ngit push -u ssh --all\r\n\r\n# Later, just need use push like below:\r\ngit push ssh <branch_name>\r\n\r\n# If local repository is outdated, you can update the local project with local repository, as below.\r\ngit pull ssh <branch_name>\r\n```\r\n\r\nNow, every time that has repository request, it will be necessary typing the password. To make the request more agile, you can copy the ssh key of the your machine to server and in future requests, the access will be granted whithout typing password.\r\n\r\nTo performe this, run commands as below:\r\n\r\n```sh\r\ncd ~\r\nmkdir ~/.ssh\r\nssh-keygen -t rsa\r\nssh-copy-id <user_name>@server_name\r\n```\r\n\r\nOn Mac OS **ssh-copy-id** is not available, so you can install it with Home Brew, command as below:\r\n\r\n```sh\r\nbrew install ssh-copy-id\r\n```\r\n\r\n##### Setting a local remote repository.\r\n\r\nCreate the local repository:\r\n\r\n```sh\r\n# Create and access the local of repository.\r\nmkdir -p ~/directory_name/<repository_name>.git\r\ncd ~/<directory_name>/<repository_name>.git\r\n\r\n# Initiate the repository.\r\ngit init --bare\r\n\r\n# Add local repository to local project.\r\ngit remote add local ~/directory_name/<repository_name>.git\r\n\r\n# On the first push, you must use --all to send all branchs to remote repository.\r\ngit push -u local --all\r\n\r\n# Later, just need use push like below:\r\ngit push local <branch_name>\r\n\r\n# If local repository is outdated, you can update the local project with local repository, as below.\r\ngit pull local <branch_name>\r\n```\r\n\r\n##### Updating the remote repository with local data.\r\n\r\n```sh\r\ngit push origin <branch_name>\r\n```\r\n\r\n##### Updating the local project with remote repository data.\r\n\r\n```sh\r\ngit pull origin <branch_name>\r\n\r\n# You also can use git fetch, but later you have to execute git merge to complete operation.\r\ngit fetch origin <branch_name>\r\ngit merge origin\r\n```\r\n\r\n##### Cloning a remote repository to start a projec from it.\r\n\r\n```sh\r\n# Just tell the project_name if you want change the name of project directory.\r\ngit clone <remote_repository_address> [project_name]\r\n```\r\n\r\n### File Changes\r\n\r\nTo see what files was changed.\r\n\r\n```sh\r\ngit status\r\n\r\n# For summarized display:\r\ngit status -s\r\n```\r\n\r\n\r\nTo view changes made to any given file.\r\n\r\n```sh\r\ngit diff [file_name]\r\n\r\n# If file_name was ommited, you will see differences of the all files.\r\ngit diff\r\n```\r\n\r\nTo revert the changes and back to previous version of the file.\r\n\r\n```sh\r\ngit checkout <file_name>\r\n\r\n# To revert all the changes of the current project, use git checkout as below:\r\ngit checkout .\r\n```\r\n\r\n### Deleting Files from git repository.\r\n\r\nTo delete a commited file, uses git as below:\r\n\r\n```sh\r\ngit rm <file_name>\r\n\r\n# To delete all files in a directory:\r\ngit rm <path_to_directory>/. -r\r\n\r\n# You also can use git add with parameter -u. This will not add new files, but will check the structure of files project  and delete unused files of git repository, as below:\r\ngit add -u\r\n```\r\n\r\n\r\n### Tags\r\n\r\nTags normally is used to create releases of the product.\r\n\r\n##### Creating Tags:\r\n\r\n```sh\r\ngit tag -a <version> -m 'descrition of tag release'\r\n```\r\n\r\n##### Listing Tags:\r\n\r\n```sh\r\ngit tag \r\n```\r\n\r\n##### Locating Tags:\r\n\r\n```sh\r\ngit tag -l '1.4.2.*'\r\n\r\n# Result:\r\nv1.4.2.1\r\nv1.4.2.2\r\nv1.4.2.3\r\nv1.4.2.4\r\n```\r\n\r\n##### Tagging Later\r\n\r\n\r\n```sh\r\n# Listing the commit logs.\r\ngit log --pretty=oneline\r\n15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'\r\na6b4c97498bd301d84096da251c98a07c7723e65 beginning write support\r\n0d52aaab4479697da7686c15f77a3d64d9165190 one more thing\r\n6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'\r\n0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function\r\n4682c3261057305bdd616e23b64b0857d832627b added a todo file\r\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\r\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\r\n964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo\r\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\r\n\r\n# Adding a tag release for a previous commit.\r\ngit tag -a v1.2 9fceb02\r\n\r\n# Showing details.\r\ngit show v1.2\r\ntag v1.2\r\nTagger: Scott Chacon <schacon@gee-mail.com>\r\nDate:   Mon Feb 9 15:32:16 2009 -0800\r\n\r\nversion 1.2\r\ncommit 9fceb02d0ae598e95dc970b74767f19372d61af8\r\nAuthor: Magnus Chacon <mchacon@gee-mail.com>\r\nDate:   Sun Apr 27 20:43:35 2008 -0700\r\n\r\n    updated rakefile\r\n...\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}